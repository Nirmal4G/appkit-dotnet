<Project InitialTargets="ValidateCustomTargetFramework">

  <!--
      The MVVM Toolkit source generators rely on Roslyn multi-targeting to support multiple versions of the 'Microsoft.CodeAnalysis.CSharp' package.

      This package reference actually needs a matching version of Roslyn to be available for consumers of the source generator, so if we always
      used the latest version, the MVVM Toolkit would just fail to load for users of e.g. an older version of Visual Studio. Thankfully, Roslyn
      supports analyzers that bundle multiple versions in the same NuGet package, each in a subfolder with a name matching the Roslyn version.

      To leverage this, a custom 'TargetFramework' is used to specify a custom target profile (like, the compiler id and version: 'roslyn4.0'))
      along with the target framework (e.g. 'netstandard2.0-roslyn4.0'). Then, the 'TargetFramework' is processed here to extract the target profile
      With this information, the build will produce multi-versioned assemblies and each will be packaged into the right NuGet package folder matching
      the compiler id and minimum target version (e.g. 'roslyn4.0').

      Due to multi-targeting build, there's no need to add version to the referenced compiler packages. It will get added here. Just leave the version empty.
  -->

  <!-- Parse the custom 'TargetFramework' to extract additional custom targets that we specify -->

  <PropertyGroup>
    <TargetCompiler Condition="$(TargetFramework.Contains('-'))">$(TargetFramework.Split('-')[1])</TargetCompiler>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetCompiler)' != ''">
    <TargetCompilerIdentifier>$(TargetCompiler.TrimEnd('.0123456789'))</TargetCompilerIdentifier>
    <TargetCompilerVersion>$(TargetCompiler.Substring($(TargetCompilerIdentifier.Length)))</TargetCompilerVersion>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetLanguage)' == ''">
    <TargetLanguage Condition="'$(MSBuildProjectExtension)' == '.csproj'">cs</TargetLanguage>
    <TargetLanguage Condition="'$(MSBuildProjectExtension)' == '.fsproj'">fs</TargetLanguage>
    <TargetLanguage Condition="'$(MSBuildProjectExtension)' == '.vbproj'">vb</TargetLanguage>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Also define a '<TARGET-COMPILER>_<VERSION-MAJOR>_<VERSION-MINOR>' build constant, so the code can multi-target whenever needed -->
    <DefineConstants>$(DefineConstants);$(TargetCompilerIdentifier.ToUpperInvariant())_$(TargetCompilerVersion.Replace('.', '_'))</DefineConstants>
  </PropertyGroup>

  <!-- Add the version to the packages matching the custom targets if none specified -->

  <Target Name="_AddVersionToCompilerPackageReferences"
          BeforeTargets="CollectPackageReferences">

    <PropertyGroup Condition="'$(TargetCompilerIdentifier)' == 'roslyn'">
      <_CompilerPackagePrefix>Microsoft.CodeAnalysis</_CompilerPackagePrefix>
      <_CompilerPackagePrefix Condition="'$(TargetLanguage)' == 'cs'">$(_CompilerPackagePrefix).CSharp</_CompilerPackagePrefix>
      <_CompilerPackagePrefix Condition="'$(TargetLanguage)' == 'vb'">$(_CompilerPackagePrefix).VisualBasic</_CompilerPackagePrefix>
    </PropertyGroup>

    <ItemGroup>
      <_CompilerPackageReference Include="@(PackageReference)" Exclude="@(PackageReference->HasMetadata('Version'))" Condition="$([System.String]::new('%(Identity)').StartsWith('$(_CompilerPackagePrefix)'))" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetCompilerIdentifier)' == 'roslyn' AND '@(_CompilerPackageReference)' != ''">
      <_CompilerPackageReference Version="4.0.1" Condition="'$(TargetCompilerVersion)' == '4.0'" />
      <_CompilerPackageReference Version="4.3.0" Condition="'$(TargetCompilerVersion)' == '4.3'" />
    </ItemGroup>

    <ItemGroup>
      <PackageReference Remove="@(_CompilerPackageReference)" />
      <PackageReference Include="@(_CompilerPackageReference)" />
      <_CompilerPackageReference Remove="@(_CompilerPackageReference)" />
    </ItemGroup>
  </Target>

  <!-- Validate the custom target framework when loading the project initially -->

  <Target Name="ValidateCustomTargetFramework">

    <!-- Check for empty 'TargetCompiler' -->
    <Error Code="NCTDEV21" Condition="'$(TargetCompiler)' == ''"
           Text="The 'TargetFramework' property does not contain a custom target profile. Please append a custom target profile to use custom target framework parsing. If this warning is a mistake, then, please check where this targets file is set to or being imported." />

    <!-- Check for empty 'TargetLanguage' -->
    <Error Code="NCTDEV22" Condition="'$(TargetLanguage)' == ''"
           Text="For the '$(MSBuildProjectName)' project with '$(MSBuildProjectExtension)' file extension, cannot determine the 'TargetLanguage' property. Please either correct the file extension or provide the value manually." />

    <!-- Check for empty 'TargetCompilerIdentifier' -->
    <Error Code="NCTDEV23" Condition="'$(TargetCompiler)' != '' AND '$(TargetCompilerIdentifier)' == ''"
           Text="The custom target profile '$(TargetCompiler)' is not of a proper format. Please follow 'xyz1.0' format for custom profiles where 'xyz' is the profile name and '1.0' is the minimum target version required." />

    <!-- Check for empty 'TargetCompilerVersion' -->
    <Error Code="NCTDEV24" Condition="'$(TargetCompiler)' != '' AND '$(TargetCompilerIdentifier)' != '' AND '$(TargetCompilerVersion)' == ''"
           Text="The custom target profile '$(TargetCompiler)' is not of a proper format. But the version is not specified. Please specify a minimum target version for the '$(TargetCompilerIdentifier)' profile, like '$(TargetCompilerIdentifier)1.0'" />
  </Target>

</Project>