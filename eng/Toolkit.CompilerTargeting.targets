<Project InitialTargets="ValidateCustomTargetFramework">

  <!--
      The Source Generators rely on multi-targeting to support multiple versions of the Compiler.

      To leverage this, a custom 'TargetFramework' is used to specify a custom target profile (like, the compiler id and version: 'roslyn4.0'))
      along with the target framework (e.g. 'netstandard2.0-roslyn4.0'). Then the 'TargetFramework' is processed here to extract the target profile.
      With this information, the build will produce multi-versioned assemblies and each will be packaged into the right NuGet package folder matching
      the compiler id and target version (e.g. 'roslyn4.0'). Then the Compiler can reference matching or compatible analyzer version from the package.

      Due to multi-targeting build, there's no need to add version to the referenced compiler packages. It will get added here.
  -->

  <!-- Parse the custom 'TargetFramework' to extract additional custom targets that we specify -->

  <PropertyGroup>
    <TargetCompiler Condition="$(TargetFramework.Contains('-'))">$(TargetFramework.Split('-')[1])</TargetCompiler>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetCompiler)' != ''">
    <_ShortCompilerIdentifier>$(TargetCompiler.TrimEnd('.0123456789'))</_ShortCompilerIdentifier>
    <TargetCompilerIdentifier Condition="'$(_ShortCompilerIdentifier)' == 'roslyn'">Roslyn</TargetCompilerIdentifier>
    <TargetCompilerVersion>$(TargetCompiler.Substring($(_ShortCompilerIdentifier.Length)))</TargetCompilerVersion>
  </PropertyGroup>

  <PropertyGroup>
    <NuGetTargetMoniker>$(TargetCompilerIdentifier)</NuGetTargetMoniker>
    <NuGetTargetMoniker Condition="'$(TargetCompilerVersion)' != ''">$(NuGetTargetMoniker),Version=$(TargetCompilerVersion)</NuGetTargetMoniker>
    <NuGetTargetMoniker Condition="'$(TargetLanguageIdentifier)' != ''">$(NuGetTargetMoniker),Language=$(TargetLanguageIdentifier)</NuGetTargetMoniker>
    <TargetFrameworkProfile>$(TargetCompilerIdentifier)$(TargetCompilerVersion)</TargetFrameworkProfile>
  </PropertyGroup>

  <!-- HACK: Property Shims to make custom multi-targeting work! -->
  <PropertyGroup>
    <AssetTargetFallback>netstandard2.0</AssetTargetFallback>
    <_TargetFrameworkDirectories>NO-TFP-DIRS</_TargetFrameworkDirectories>
    <_FullFrameworkReferenceAssemblyPaths>NO-TFP-DIRS</_FullFrameworkReferenceAssemblyPaths>
    <TargetFrameworkDisplayName>.NET Standard v2.0 with $(TargetCompilerIdentifier) v$(TargetCompilerVersion)</TargetFrameworkDisplayName>
    <ReferringTargetFrameworkForProjectReferences>.NETStandard,Version=v2.0</ReferringTargetFrameworkForProjectReferences>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Define an compiler identifier pre-processor constant. This enables to group targeting code under multi-targeting -->
    <_ImplicitCompilerIdentifierDefine>$(TargetCompilerIdentifier.ToUpperInvariant())</_ImplicitCompilerIdentifierDefine>
    <!-- If supported version list is given, then enable multi-version implicit defines -->
    <_EnableImplicitMultiVersionDefines Condition="'$(SupportedCompilerVersions)' != '' AND $(SupportedCompilerVersions.Contains(';'))" >true</_EnableImplicitMultiVersionDefines>
    <!-- Define a single version pre-processor constant, if the project does not need multi-version defines -->
    <_ImplicitCompilerVersionDefine Condition="'$(_ShortCompilerVersion)' != '' AND '$(_EnableImplicitMultiVersionDefines)' != 'true'">$(_ImplicitCompilerIdentifierDefine)_$(TargetCompilerVersion.Replace('.', '_'))</_ImplicitCompilerVersionDefine>
  </PropertyGroup>

  <!--
      Add the symbols to @(_ImplicitDefineConstant) list which will be used to
      populate the $(DefineConstants) and $(FinalDefineConstants) in VB projects.
  -->
  <ItemGroup>
    <!-- Add implicit define constants for the target compiler -->
    <_ImplicitDefineConstant Include="$(_ImplicitCompilerIdentifierDefine)" />
    <_ImplicitDefineConstant Include="$(_ImplicitCompilerVersionDefine)" Condition="'$(_ImplicitCompilerVersionDefine)' != ''" />
    <!-- Add supported compiler versions to item list for expanding them into implicit defines -->
    <_SupportedCompilerVersion Include="$(SupportedCompilerVersions)" Condition="'$(_EnableImplicitMultiVersionDefines)' == 'true'" />
  </ItemGroup>

  <!--
  ====================================================================================================
                                AddImplicitMultiVersionDefineConstants

      Generate the multi-version pre-processor defines, so the source code can be multi-targeted
      across compiler and its versions. Be sure to insert all the defines into the SDK internal
      @(_ImplicitDefineConstant) list before the 'AddImplicitDefineConstants' target is run.
  ====================================================================================================
  -->
  <Target Name="AddImplicitMultiVersionDefineConstants"
          Condition="'$(_EnableImplicitMultiVersionDefines)' == 'true'"
          BeforeTargets="AddImplicitDefineConstants">

    <!-- Adding custom defines through conditional batching is only supported inside targets -->
    <ItemGroup>
      <TargetCompilerVersion Include="@(_SupportedCompilerVersion)" Condition="$([MSBuild]::VersionLessThanOrEquals(%(Identity), $(TargetCompilerVersion)))" />
      <!-- Generate the multi-version "<COMPILER>_<MAJOR>_<MINOR>_OR_GREATER" pre-processor defines -->
      <_ImplicitCompilerVersionDefine Include="@(TargetCompilerVersion->Replace('.', '_')->'$(_ImplicitCompilerIdentifierDefine)_%(Identity)_OR_GREATER')" />
      <_ImplicitDefineConstant Include="@(_ImplicitCompilerVersionDefine)" />
    </ItemGroup>
  </Target>

  <!--
  ====================================================================================================
                                _AddVersionToCompilerPackageReferences

      Add the version to the compiler packages in @(PackageReference) items if none specified.
      Be sure to add or update the packages before the 'CollectPackageReferences' target is run.
  ====================================================================================================
  -->
  <Target Name="_AddVersionToCompilerPackageReferences"
          BeforeTargets="CollectPackageReferences">

    <PropertyGroup Condition="'$(TargetCompilerIdentifier)' == 'Roslyn'">
      <_CompilerPackagePrefix>Microsoft.CodeAnalysis</_CompilerPackagePrefix>
      <_CompilerPackagePrefix Condition="'$(TargetLanguageIdentifier)' != ''">$(_CompilerPackagePrefix).$(TargetLanguageIdentifier)</_CompilerPackagePrefix>
    </PropertyGroup>

    <ItemGroup>
      <_CompilerPackageReference Include="@(PackageReference)" Exclude="@(PackageReference->HasMetadata('Version'))" Condition="$([System.String]::new(%(Identity)).StartsWith($(_CompilerPackagePrefix)))" />
    </ItemGroup>

    <!--
        The Compiler package references needs a matching compiler version to be available for the consumers of the Source Generator.
        Otherwise, the Source Generator with non-matching Compiler package versions would fail to load in an older Compiler version.
    -->
    <ItemGroup Condition="'$(TargetCompilerIdentifier)' == 'Roslyn' AND '@(_CompilerPackageReference)' != ''">
      <_CompilerPackageReference Version="4.0.1" Condition="'$(TargetCompilerVersion)' == '4.0'" />
      <_CompilerPackageReference Version="4.3.1" Condition="'$(TargetCompilerVersion)' == '4.3'" />
    </ItemGroup>

    <ItemGroup>
      <PackageReference Remove="@(_CompilerPackageReference)" />
      <PackageReference Include="@(_CompilerPackageReference)" />
      <_CompilerPackageReference Remove="@(_CompilerPackageReference)" />
    </ItemGroup>
  </Target>

  <!--
  ====================================================================================================
                                    ValidateCustomTargetFramework

      Validate the custom target framework when loading the project initially.
  ====================================================================================================
  -->
  <Target Name="ValidateCustomTargetFramework">

    <!-- Check for empty 'TargetCompiler' -->
    <Error Code="NCTDEV21" Condition="'$(TargetCompiler)' == ''"
           Text="The 'TargetFramework' property does not contain a custom target profile. Please set/append a custom target profile to use custom target framework parsing. If this warning is a mistake, then, please check where this targets file is being imported." />

    <!-- Check for empty 'TargetLanguage' -->
    <Error Code="NCTDEV22" Condition="'$(TargetLanguage)' == ''"
           Text="For the '$(MSBuildProjectName)' project with '$(MSBuildProjectExtension)' file extension, cannot determine the 'TargetLanguage' property. Please either correct the file extension or provide the value manually." />

    <!-- Check for empty 'TargetCompilerIdentifier' -->
    <Error Code="NCTDEV23" Condition="'$(TargetCompiler)' != '' AND '$(TargetCompilerIdentifier)' == ''"
           Text="The custom target profile '$(TargetCompiler)' is not of a proper format. Please follow 'xyz1.0' format for custom profiles where 'xyz' is the profile name and '1.0' is the minimum target version required." />

    <!-- Check for empty 'TargetCompilerVersion' -->
    <Error Code="NCTDEV24" Condition="'$(TargetCompiler)' != '' AND '$(TargetCompilerIdentifier)' != '' AND '$(TargetCompilerVersion)' == ''"
           Text="The custom target profile '$(TargetCompiler)' is not of a proper format. The version is not specified. Please specify a minimum target version for the '$(_ShortCompilerIdentifier)' profile, like '$(_ShortCompilerIdentifier)1.0'" />
  </Target>

</Project>